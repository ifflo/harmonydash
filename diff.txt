diff --git a/app/admin.py b/app/admin.py
index 73c6a8e..2460eb2 100644
--- a/app/admin.py
+++ b/app/admin.py
@@ -1,4 +1,6 @@
 # app/admin.py
+import logging
+
 from django.contrib import admin
 from .models import Bonus, FinancialInfo, FinancialSettings, Salary, Schedule, Task, Transaction, UserProfile
 from django import forms
@@ -26,11 +28,16 @@ class FinancialSettingsForm(forms.ModelForm):
     def __init__(self, *args, **kwargs):
         super().__init__(*args, **kwargs)
 
-        api_key = settings.YNAB_API_KEY  # Securely retrieve the API key
+        api_key = settings.YNAB_API_KEY
         ynab_client = YNABClient(api_key)
-        budgets = ynab_client.get_budgets()
-        budget_choices = [(budget['id'], budget['name']) for budget in budgets]
-        self.fields['ynab_budget'].choices = budget_choices
+        try:
+            budgets = ynab_client.get_budgets()
+            budget_choices = [(budget['id'], budget['name']) for budget in budgets]
+            self.fields['ynab_budget'].choices = budget_choices
+        except Exception as e:
+            # Handle exceptions (e.g., log error and set empty choices)
+            self.fields['ynab_budget'].choices = []
+            logging.exception(e)
 
     def save(self, commit=True):
         self.instance.budget_id = self.cleaned_data['ynab_budget']
diff --git a/app/management/commands/sync_ynab.py b/app/management/commands/sync_ynab.py
index 5ad9514..4191c46 100644
--- a/app/management/commands/sync_ynab.py
+++ b/app/management/commands/sync_ynab.py
@@ -1,7 +1,7 @@
 # app/management/commands/sync_ynab.py
 
 from django.core.management.base import BaseCommand
-from ...utils.ynab_client import YNABClient
+from app.utils.ynab_client import YNABClient
 from django.conf import settings
 
 
@@ -11,5 +11,8 @@ class Command(BaseCommand):
     def handle(self, *args, **kwargs):
         api_key = settings.YNAB_API_KEY  # Securely retrieve the API key
         ynab_client = YNABClient(api_key)
-        ynab_client.sync_ynab_data()
-        self.stdout.write(self.style.SUCCESS('Successfully synced data from YNAB API'))
+        try:
+            ynab_client.sync_ynab_data()
+            self.stdout.write(self.style.SUCCESS('Successfully synced data from YNAB API'))
+        except Exception as e:
+            self.stdout.write(self.style.ERROR(f'Error syncing data from YNAB API: {e}'))
diff --git a/app/tasks.py b/app/tasks.py
index 2bc0024..215f30e 100644
--- a/app/tasks.py
+++ b/app/tasks.py
@@ -15,5 +15,11 @@ def update_financial_data(user_id):
 @shared_task
 def update_transactions():
     ynab_client = YNABClient()
-    transactions = ynab_client.fetch_transactions()
-    # Process and store transactions
+    try:
+        # Replace 'budget_id_example' with the actual budget ID
+        transactions = ynab_client.get_transactions('budget_id_example')
+        # Process and store transactions
+        # Add your logic here to handle transactions
+    except Exception as e:
+        # Handle exceptions (e.g., log error)
+        print(f"Error updating transactions: {e}")
diff --git a/app/utils/ynab_client.py b/app/utils/ynab_client.py
index 59e9e85..73d6c33 100644
--- a/app/utils/ynab_client.py
+++ b/app/utils/ynab_client.py
@@ -1,10 +1,12 @@
 # app/utils/ynab_client.py
 import requests
 from urllib.parse import urljoin
-
+import traceback
 from app.models import FinancialSettings
 import ynab_api
 from pprint import pprint
+from ynab_api.model.error_response import ErrorResponse
+from ynab_api.model.budget_summary_response import BudgetSummaryResponse
 from ynab_api.api import accounts_api, budgets_api, months_api, categories_api, transactions_api, \
     scheduled_transactions_api, user_api, payees_api, payee_locations_api
 from django.conf import settings
@@ -17,18 +19,45 @@ class YNABClient:
             host="https://api.ynab.com/v1"
         )
         self.configuration.api_key['bearer'] = self.api_key
+        self.configuration.api_key_prefix['bearer'] = 'Bearer'
         self.api_client = ynab_api.ApiClient(self.configuration)
 
     def close(self):
         self.api_client.close()
 
+    def sync_ynab_data(self):
+        """Synchronize data from the YNAB API."""
+        try:
+            # Fetch budgets using the new method
+            budgets = self.get_budgets()
+
+            # Check if budgets data is valid
+            if budgets is None or not isinstance(budgets, list):
+                raise ValueError("Invalid budget data received from YNAB API")
+
+            # Process and integrate budgets into Django models
+            for budget in budgets:
+                # Update or create budget in FinancialSettings model
+                FinancialSettings.objects.update_or_create(
+                    budget_id=budget.id,  # Assuming 'id' is the correct field name
+                    defaults={
+                        'budget_name': budget.name,  # Assuming 'name' is the correct field name
+                        # ... other fields if necessary ...
+                    }
+                )
+            print("YNAB data synchronized successfully.")
+        except Exception as e:
+            print(f"Error during YNAB data synchronization: {e}")
+            print(traceback.format_exc())
+
     def get_budgets(self):
         """Retrieve a list of budgets."""
         with ynab_api.ApiClient(self.configuration) as api_client:
             api_instance = budgets_api.BudgetsApi(api_client)
+            include_accounts = True
             try:
-                api_response = api_instance.get_budgets()
-                return api_response.data.budgets
+                api_response = api_instance.get_budgets(include_accounts=include_accounts)
+                return api_response
             except ynab_api.ApiException as e:
                 print("Exception when calling BudgetsApi->get_budgets: %s\n" % e)
                 return None
diff --git a/history.txt b/history.txt
index 8de231a..4e47fae 100644
--- a/history.txt
+++ b/history.txt
@@ -1,3 +1,44 @@
+commit 1eadc63858dc4936b57fd26d3a18d572bdf6fffd
+Author: jdcundiff <jd_cundiff@outlook.com>
+Date:   Wed Dec 13 12:27:10 2023 -0600
+
+    Condensed ynab_integration.py to ynab_client.py.
+
+commit fa6df894187049ea8eec9c64f2e8f50fd6085618
+Author: jdcundiff <jd_cundiff@outlook.com>
+Date:   Wed Dec 13 12:25:04 2023 -0600
+
+    - Expanded YNABClient class to include a full range of methods for interacting with the YNAB API.
+    - Added methods for handling budgets, accounts, transactions, categories, payees, and their related functionalities.
+    - Ensured robust error handling and efficient API communication within each method.
+    - Prepared the backend for seamless integration with the front-end, enabling detailed YNAB data representation.
+    
+    Next Steps:
+    - Begin integration of YNABClient functionalities into the React frontend.
+    - Focus on displaying YNAB data using React components, leveraging React Bootstrap and ChartJS for enhanced visual representation.
+
+commit ae050a8c26815b1a1c23f909ba9041eb94e85dea
+Author: jdcundiff <jd_cundiff@outlook.com>
+Date:   Mon Dec 11 12:37:22 2023 -0600
+
+    Title: Add Budget Name to FinancialSettings and Implement YNAB Sync
+    
+    Description:
+    - Updated the FinancialSettings model to include a new field 'budget_name'.
+    - Modified YNABClient class to include 'sync_ynab_data' method for synchronizing budget data from the YNAB API.
+    - Enhanced the FinancialSettings admin form to include a dropdown for selecting budgets fetched dynamically from YNAB.
+    - Created a Django management command for triggering YNAB data synchronization.
+    - Ensured proper handling and storage of YNAB API keys.
+    - Conducted thorough testing to ensure data integrity and functionality.
+    
+    Next Steps: With the YNAB integration now functional, the next steps in the project are:
+    1. Expand the YNAB synchronization to include additional data types like transactions and accounts, if required.
+    2. Improve error handling and logging in YNAB data synchronization to ensure robustness.
+    3. Consider setting up periodic synchronization using Celery or a similar task scheduler.
+    4. Perform a security audit, especially around the handling of API keys and financial data.
+    5. Gather user feedback on the new features and make adjustments based on the input received.
+    6. Update project documentation to reflect the new changes and functionalities.
+
 commit d19f0d615097fceb2bcb8629bd7c0314e13d376e
 Author: jdcundiff <jd_cundiff@outlook.com>
 Date:   Sun Dec 10 15:47:52 2023 -0600
diff --git a/tree_structure.txt b/tree_structure.txt
index 3d5b50d..8879712 100644
--- a/tree_structure.txt
+++ b/tree_structure.txt
@@ -5,11 +5,15 @@
 │   ├── __init__.py
 │   ├── admin.py
 │   ├── apps.py
+│   ├── management
+│   │   └── commands
 │   ├── migrations
 │   │   ├── 0001_initial.py
 │   │   ├── 0002_transaction_financialsettings.py
 │   │   ├── 0003_salary_bonus.py
 │   │   ├── 0004_transaction_transaction_type.py
+│   │   ├── 0005_financialsettings_budget_id.py
+│   │   ├── 0006_financialsettings_budget_name.py
 │   │   └── __init__.py
 │   ├── models
 │   │   ├── __init__.py
@@ -91,6 +95,7 @@
 ├── package-lock.json
 ├── package.json
 ├── requirements.txt
+├── sync_error.txt
 └── tree_structure.txt
 
-21 directories, 73 files
+23 directories, 76 files
